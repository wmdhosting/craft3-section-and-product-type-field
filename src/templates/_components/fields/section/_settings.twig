{% import '_includes/forms' as forms %}

{% set allowSections = selectAll ? [true] : field.allowedSections %}

{{ forms.checkboxField({
    label : 'Multiple Select' | t('section-and-product-type'),
    instructions : 'If checked, the user can select multiple sections, otherwise they can only select one.' | t('section-and-product-type'),
    name : 'multiple',
    checked: field.multiple
}) }}

<hr>

{{ forms.checkboxField({
    label : 'Select All Sections' | t('section-and-product-type'),
    instructions : 'This will allow all sections to be used for selection.' | t('section-and-product-type'),
    name : 'selectAll',
    checked: field.selectAll
}) }}

<hr>

{{ forms.textField({
    id: 'searchInput',
    label : 'Select Section By Text In Handle' | t('section-and-product-type'),
    instructions : 'This will allow to select all section by text in handle.' | t('section-and-product-type'),
    name : 'partOfHandle',
    value: partOfHandle,
}) }}

<hr>

{{ forms.checkboxGroupField({
    label : 'Allowed Sections' | t('section-and-product-type'),
    instructions : 'The sections that may be chosen for this field.\n **If selected Select All Sections, all sections are selected**.' | t('section-and-product-type'),
    name : 'allowedSections',
    values: allowSections,
    options : sections
}) }}


<hr>

{{ forms.checkboxGroupField({
    label : 'Exclude Sections' | t('section-and-product-type'),
    instructions : 'The sections that will be excluded from the selection for this field.\n **Used when select all is on**.' | t('section-and-product-type'),
    options : sections,
    values: field.excludedSections,
    id : 'excludedSections',
    name : 'excludedSections',
}) }}

<script>
    const searchInput = document.querySelector('#types-wmd-sectionandproducttype-fields-SectionField-searchInput');
    const checkboxes = document.querySelectorAll('.checkbox-group .checkboxfield');

    searchInput.addEventListener('input', (event) => {
        const searchText = event.target.value.toLowerCase();
        if (searchText.length > 0) {
            checkboxes.forEach((checkbox) => {
                const checkboxText = checkbox.querySelector('label').textContent.toLowerCase();
                if (checkboxText.includes(searchText)) {
                    checkbox.style.background = 'yellow';
                } else {
                     checkbox.style.background = '';
                }
            })
        } else {
            checkboxes.forEach((checkbox) => {
                const checkboxText = checkbox.querySelector('label').textContent.toLowerCase();
                if (checkboxText.includes(searchText)) {
                    checkbox.style.background = '';
                }
            })
        }
    });
</script>
